import java.util.*;
import java.io.*;

public class A {
	static Scanner sc;
	static PrintWriter pw;
	static Random r;

	public static void main(String[] args) throws Exception {
		pw = new PrintWriter(System.out);
		sc = new Scanner(System.in);
		r = new Random();
		int n = sc.nextInt();
		pair[] arr = new pair[n];
		for (int i = 0; i < n; i++) {
			arr[i] = new pair(sc.nextInt(), i + 1);
		}
		Arrays.sort(arr, (a, b) -> a.val == b.val ? (b.idx - a.idx) : (a.val - b.val));
		int N = 1;
		while (n > N)
			N <<= 1;
		SegmentTree st = new SegmentTree(N);
		int[] dp = new int[n];
		for (int i = 0; i < n; i++) {
			pair p = arr[i];
			int maxPrev = st.query(1, p.idx - 1);
			dp[i] = maxPrev + 1;
			st.updatePoint(p.idx, dp[i]);
		}
		int ans = 0;
		for (int x : dp) {
			ans = Math.max(ans, x);
		}
		pw.println(ans); // pw.println(st.query(1,N));
		pw.flush();
	}

	static class SegmentTree {
		int[] sg;
		int N;

		public SegmentTree(int N) {
			this.N = N;
			sg = new int[(N) << 1];
		}

		public void updatePoint(int idx, int value) {
			idx += N - 1;
			if (sg[idx] >= value)
				return;
			sg[idx] = value;
			idx = idx >> 1;
			while (idx > 0) {
				int leftChild = idx << 1;
				int rightChild = idx << 1 | 1;
				sg[idx] = Math.max(sg[leftChild], sg[rightChild]);
				idx >>= 1;
			}
		}

		public int query(int i, int j) {
			return query(1, 1, N, i, j);
		}

		public int query(int node, int l, int r, int i, int j) {
			if (i <= l && r <= j) {
				return sg[node];
			}
			if (r < i || l > j) {
				return 0;
			}
			int leftChild = node << 1;
			int rightChild = node << 1 | 1;
			int mid = l + r >> 1;
			return Math.max(query(leftChild, l, mid, i, j), query(rightChild, mid + 1, r, i, j));
		}
	}

	static class pair {
		int val, idx;

		public pair(int a, int b) {
			val = a;
			idx = b;
		}
	}

	static class Scanner {
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public Scanner(String r) throws Exception {
			br = new BufferedReader(new FileReader(new File(r)));
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

		public long[] nextlongArray(int n) throws IOException {
			long[] a = new long[n];
			for (int i = 0; i < n; i++)
				a[i] = nextLong();
			return a;
		}

		public Long[] nextLongArray(int n) throws IOException {
			Long[] a = new Long[n];
			for (int i = 0; i < n; i++)
				a[i] = nextLong();
			return a;
		}

		public int[] nextIntArray(int n) throws IOException {
			int[] a = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public Integer[] nextIntegerArray(int n) throws IOException {
			Integer[] a = new Integer[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		public boolean ready() throws IOException {
			return br.ready();
		}

	}

}
