import java.util.*;

import java.io.*;

public class Main {
	static PrintWriter pw;
	static Scanner sc;
	static Random rn = new Random();

	static int compare(int[] a, int[] b) {
		if (a[0] == b[0])
			return a[1] - b[1];
		return a[0] - b[0];
	}

	public static void main(String[] args) throws Exception {
		pw = new PrintWriter(System.out);
		sc = new Scanner(System.in);
		int n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();
		DSU dsu = new DSU(n);
		Stack<int[]> queries = new Stack<>();
		TreeSet<int[]> edges = new TreeSet<>((a, b) -> compare(a, b));
		for (int i = 0; i < m; i++) {
			int u = sc.nextInt() - 1;
			int v = sc.nextInt() - 1;
			edges.add(new int[] { Math.min(u, v), Math.max(u, v) });
		}
		for (int i = 0; i < k; i++) {
			String string = sc.next();
			int u = sc.nextInt() - 1;
			int v = sc.nextInt() - 1;
			if (string.equals("cut")) {
				queries.add(new int[] { 0, u, v });
				edges.remove(new int[] { Math.min(u, v), Math.max(u, v) });
			} else {
				queries.add(new int[] { 1, u, v });
			}
		}
		for (int[] edge : edges) {
//			pw.println(Arrays.toString(edge));
			dsu.join(edge[0], edge[1]);
		}
		Stack<Boolean> ans = new Stack<>();
		while (!queries.isEmpty()) {
			int[] cur = queries.pop();
			if (cur[0] == 0) {
				dsu.join(cur[1], cur[2]);
			} else {
				ans.add(dsu.find(cur[1]) == dsu.find(cur[2]));
			}
		}
		while (!ans.isEmpty()) {
			pw.println(ans.pop() ? "YES" : "NO");
		}
		pw.flush();
	}

	static class DSU {
		LinkedList<Integer>[] allSets;
		int[] parent, min;

		public DSU(int n) {
			parent = new int[n];
			allSets = new LinkedList[n];
			min = new int[n];
			for (int i = 0; i < n; i++) {
				allSets[i] = new LinkedList<>();
				allSets[i].add(i);
				parent[i] = i;
				min[i] = i;
			}
		}

		public int find(int x) {
			if (parent[x] == x) {
				return x;
			}
			return parent[x] = find(parent[x]);
		}

		public int getMin(int x) {
			return min[find(x)];
		}

		public void join(int x, int y) {
			int a = find(x), b = find(y);
			if (a == b) {
				return;
			}
			min[a] = min[b] = Math.min(min[a],min[b]);
			if (allSets[a].size() >= allSets[b].size()) {
				while (!allSets[b].isEmpty()) {
					int cur = allSets[b].poll();
					parent[cur] = a;
					allSets[a].add(cur);
				}
			} else {
				while (!allSets[a].isEmpty()) {
					int cur = allSets[a].poll();
					parent[cur] = b;
					allSets[b].add(cur);
				}
			}
		}
	}

	static class DSU2 {
		int[] parent, rank, setSize;

		public DSU2(int n) {
			parent = new int[n];
			rank = new int[n];
			setSize = new int[n];
			for (int i = 0; i < n; i++) {
				parent[i] = i;
				setSize[i] = 1;
			}
		}

		public int find(int x) {
			if (parent[x] == x) {
				return x;
			}
			return parent[x] = find(parent[x]);
		}

		public void join(int x, int y) {
			int a = find(x), b = find(y);
			if (a == b)
				return;
			if (rank[a] >= rank[b]) {
				parent[b] = a;
				setSize[a] += setSize[b];
				if (rank[a] == rank[b])
					rank[a]++;
			} else {
				parent[a] = b;
				setSize[b] += setSize[a];
				if (rank[a] == rank[b])
					rank[b]++;
			}
		}
	}

	static class Scanner {
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public Scanner(String r) throws Exception {
			br = new BufferedReader(new FileReader(new File(r)));
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}
	}

}
